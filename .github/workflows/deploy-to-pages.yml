name: Build & Deploy (pygbag → GitHub Pages)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -V
          pip install --upgrade pip
          pip install pygame-ce pygbag

      - name: Build with pygbag (custom template)
        id: build_custom
        continue-on-error: true   # we'll fall back if this fails
        run: |
          set -euxo pipefail
          # Clean previous artifacts
          rm -rf build web || true

          # Build with custom template - folder must be LAST argument
          python -m pygbag --build --template custom_template.tmpl . | tee build_custom.log

          # Must exist
          test -f build/web/index.html

          # Confirm template injection happened
          if grep -Fq "{{ pygbag_scripts }}" build/web/index.html; then
            echo "ERROR: Template placeholder still present. Injection failed."
            exit 2
          fi

          # Basic runtime artifacts
          echo "=== Checking runtime files ==="
          ls -lah build/web
          test -f build/web/main.js
          test -f build/web/main.data
          echo "✓ Build successful with custom template"

      - name: Fallback build (default template)
        if: steps.build_custom.outcome != 'success'
        run: |
          set -euxo pipefail
          echo "Custom template build failed — trying default pygbag template"
          rm -rf build web || true
          python -m pygbag --build . | tee build_default.log
          test -f build/web/index.html
          ls -lah build/web
          test -f build/web/main.js
          test -f build/web/main.data
          echo "✓ Build successful with default template"

      - name: Show first 120 lines of built index
        run: |
          echo "=== First 120 lines of index.html ==="
          sed -n '1,120p' build/web/index.html || true
          echo "=== End of preview ==="

      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pygbag-build-logs
          path: |
            build_custom.log
            build_default.log
            build/web/index.html
          if-no-files-found: ignore

      - name: Ensure assets are in build/web
        run: |
          set -euxo pipefail
          echo "=== Copying assets to build/web ==="
          
          # Create directories if they don't exist
          mkdir -p build/web/assets build/web/sounds
          
          # Copy assets
          [ -d assets ] && cp -rv assets/* build/web/assets/ || true
          [ -d sounds ] && cp -rv sounds/* build/web/sounds/ || true
          
          # Also copy sound_effects.py if it exists
          [ -f sound_effects.py ] && cp -v sound_effects.py build/web/ || true
          
          echo "=== Final build/web contents ==="
          find build/web -maxdepth 2 -type f | sort
          
          echo "=== Verify critical files ==="
          test -f build/web/assets/game-title.png && echo "✓ Title image" || echo "✗ Title image missing"
          test -f build/web/assets/PressStart2P.ttf && echo "✓ Font" || echo "✗ Font missing"
          test -d build/web/sounds && echo "✓ Sounds folder" || echo "✗ Sounds folder missing"

      - uses: actions/configure-pages@v4

      - uses: actions/upload-pages-artifact@v3
        with:
          path: build/web

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4