name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install toolchain (pygbag stable)
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          pip install pygame-ce pygbag==0.9.2

      - name: Clean previous builds & cache
        run: |
          set -euxo pipefail
          rm -rf build web build/web-cache || true

      - name: Build with pygbag (default template) # ← correct flag order
        run: |
          set -euxo pipefail
          python -m pygbag --build .
          test -f build/web/index.html
          # sanity: ensure the file isn't tiny
          [ "$(wc -c < build/web/index.html)" -ge 5000 ]

      - name: List build directory
        run: |
          echo "Contents of build/web:"
          ls -la build/web/

      - name: Inject splash overlay (post-process index.html)
        run: |
          set -euxo pipefail
          python - << 'PY'
          from pathlib import Path
          p = Path('build/web/index.html')
          if not p.exists():
              raise SystemExit("index.html not found; build step failed.")
          html = p.read_text(encoding='utf-8')

          if 'id="splash-overlay"' not in html:
              # insert right after <body ...>
              i = html.find('<body')
              if i == -1: raise SystemExit("<body> not found in built html")
              j = html.find('>', i)
              if j == -1: raise SystemExit("malformed <body> tag")
              head, tail = html[:j+1], html[j+1:]

              overlay = """<!-- Splash Overlay -->
          <div id="splash-overlay" style="position:fixed;inset:0;background:#70c5ce;display:flex;align-items:center;justify-content:center;z-index:10000;cursor:pointer;transition:opacity .4s ease-out;">
            <img src="assets/game-title.png" style="max-width:80%;max-height:80%;object-fit:contain;image-rendering:pixelated;animation:pulse 2s ease-in-out infinite" alt="Flappy Bird">
          </div>
          <style>@keyframes pulse{0%,100%{transform:scale(1)}50%{transform:scale(1.05)}}</style>
          <script>
          (function(){
            var hidden=false;
            function hide(){ if(hidden) return; hidden=true;
              var el=document.getElementById('splash-overlay'); if(el){ el.style.opacity='0'; setTimeout(()=>{ el.remove(); },400); }
              var c=document.getElementById('canvas'); if(c) c.focus();
            }
            async function waitForFirstDraw(){
              const c=document.getElementById('canvas'); if(!c) return false;
              const ctx=c.getContext && c.getContext('2d'); if(!ctx) return false;
              const bg=[0x70,0xc5,0xce];
              for(let i=0;i<100;i++){
                try{
                  const d=ctx.getImageData(0,0,1,1).data;
                  if(!(d[0]===bg[0]&&d[1]===bg[1]&&d[2]===bg[2])) return true;
                }catch(e){}
                await new Promise(r=>setTimeout(r,100));
              }
              return false;
            }
            function setup(){
              const s=document.getElementById('splash-overlay'); if(!s) return;
              let handled=false;
              async function go(e){
                if(handled) return; handled=true;
                if(e && e.cancelable) e.preventDefault();
                // give runtime a tick to boot, then wait for first draw (or timeout)
                await new Promise(r=>setTimeout(r,200));
                await waitForFirstDraw();
                hide();
                // forward a click to satisfy audio/gesture policies
                try{ document.dispatchEvent(new MouseEvent('click',{bubbles:true,cancelable:true})); }catch(_){}
              }
              s.addEventListener('click', go, {passive:false});
              if('ontouchstart' in window) s.addEventListener('touchend', go, {passive:false});
              document.addEventListener('keydown', (e)=>{ if(!handled){ go(e); } }, {once:true});
            }
            if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', setup); else setup();
          })();
          </script>"""
              html = head + overlay + tail

          p.write_text(html, encoding='utf-8')
          print("✓ Splash overlay injected")
          PY

      - name: Copy assets to build/web (optional)
        run: |
          set -euxo pipefail
          mkdir -p build/web/assets build/web/sounds
          [ -d assets ] && cp -rv assets/* build/web/assets/ || true
          [ -d sounds ] && cp -rv sounds/* build/web/sounds/ || true

      - name: Configure Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/web

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
