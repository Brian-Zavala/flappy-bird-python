<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>{{ title }}</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    html, body {
      width: 100%;
      height: 100%;
      overflow: hidden;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
    }
    
    body {
      position: relative;
      background: #70c5ce;
    }

    /* Full viewport splash screen */
    #splash {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 9999;
      cursor: pointer;
      background: #70c5ce;
      display: flex;
      justify-content: center;
      align-items: center;
      -webkit-tap-highlight-color: transparent;
    }

    /* Fullscreen splash image */
    #splash-image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover; /* Fill entire viewport */
      pointer-events: none; /* Ensure clicks pass through to splash div */
    }
    
    /* Tap to start text overlay */
    #tap-text {
      position: absolute;
      bottom: 10%;
      left: 50%;
      transform: translateX(-50%);
      color: white;
      font-family: 'Courier New', monospace;
      font-size: 24px;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
      animation: pulse 2s ease-in-out infinite;
      z-index: 10;
      pointer-events: none; /* Ensure clicks pass through */
      -webkit-user-select: none;
      user-select: none;
    }
    
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    /* Canvas for the game */
    #canvas {
      display: block;
      width: 100%;
      height: 100%;
      image-rendering: pixelated;
      image-rendering: -moz-crisp-edges;
      image-rendering: crisp-edges;
      outline: none; /* Remove focus outline */
    }
  </style>
</head>
<body>
  <!-- Splash screen overlay -->
  <div id="splash">
    <img id="splash-image" alt="Flappy Bird" />
    <div id="tap-text">Tap to Start</div>
  </div>
  
  <!-- Game canvas with tabindex for focus support -->
  <canvas id="canvas" tabindex="0"></canvas>

  {{ pygbag_scripts }}

  <script>
    // Prevent multiple calls and track state
    let splashHidden = false;
    let imageLoaded = false;
    
    // Handle splash screen removal
    function hideSplash() {
      // Prevent multiple calls
      if (splashHidden) return;
      splashHidden = true;
      
      // Remove splash
      const splash = document.getElementById('splash');
      if (splash) {
        splash.style.display = 'none';
        // Also remove from DOM after hiding to free memory
        setTimeout(() => {
          if (splash.parentNode) {
            splash.parentNode.removeChild(splash);
          }
        }, 500);
      }
      
      // Focus canvas and trigger game start
      const canvas = document.getElementById('canvas');
      if (canvas) {
        // Focus canvas for keyboard input
        canvas.focus();
        
        // Send multiple events to ensure game starts
        setTimeout(() => {
          try {
            // Send mousedown first
            const mouseDown = new MouseEvent('mousedown', {
              view: window,
              bubbles: true,
              cancelable: true,
              clientX: canvas.offsetWidth / 2,
              clientY: canvas.offsetHeight / 2
            });
            canvas.dispatchEvent(mouseDown);
            
            // Then mouseup
            const mouseUp = new MouseEvent('mouseup', {
              view: window,
              bubbles: true,
              cancelable: true,
              clientX: canvas.offsetWidth / 2,
              clientY: canvas.offsetHeight / 2
            });
            canvas.dispatchEvent(mouseUp);
            
            // Finally click
            const click = new MouseEvent('click', {
              view: window,
              bubbles: true,
              cancelable: true,
              clientX: canvas.offsetWidth / 2,
              clientY: canvas.offsetHeight / 2
            });
            canvas.dispatchEvent(click);
          } catch (e) {
            console.log('Error dispatching events:', e);
          }
        }, 200); // Increased delay for game initialization
      }
    }
    
    // Setup event listeners
    function setupEventListeners() {
      const splash = document.getElementById('splash');
      
      if (splash) {
        // Handle both mouse and touch with a unified approach
        let interactionHandled = false;
        
        function handleInteraction(e) {
          if (interactionHandled) return;
          interactionHandled = true;
          
          if (e.cancelable) {
            e.preventDefault();
          }
          e.stopPropagation();
          hideSplash();
        }
        
        // Mouse events
        splash.addEventListener('click', handleInteraction, { passive: false });
        
        // Touch events (only on touch devices)
        if ('ontouchstart' in window) {
          splash.addEventListener('touchend', handleInteraction, { passive: false });
        }
      }
      
      // Keyboard support (any key to start)
      document.addEventListener('keydown', function(e) {
        if (!splashHidden) {
          e.preventDefault();
          hideSplash();
        }
      }, { once: true });
    }
    
    // Load splash image with fallback paths
    function loadSplashImage() {
      const img = document.getElementById('splash-image');
      if (!img) return;
      
      // Paths to try in order of likelihood
      const paths = [
        'assets/game-title.png',
        './assets/game-title.png',
        'game-title.png',
        './game-title.png',
        '/assets/game-title.png',
        '../assets/game-title.png'
      ];
      
      let currentPathIndex = 0;
      let retryCount = 0;
      const maxRetries = 2;
      
      function tryNextPath() {
        if (currentPathIndex >= paths.length) {
          if (retryCount < maxRetries) {
            // Retry all paths once more after a delay (assets might load late)
            retryCount++;
            currentPathIndex = 0;
            setTimeout(tryNextPath, 500);
            return;
          }
          
          // All paths failed after retries
          img.style.display = 'none';
          console.warn('Splash image not found after trying all paths with retries');
          // Still show splash with blue background
          return;
        }
        
        const path = paths[currentPathIndex];
        console.log('Trying to load splash image from:', path);
        img.src = path;
        currentPathIndex++;
      }
      
      // Set up error handler
      img.onerror = function() {
        console.log('Failed to load:', img.src);
        tryNextPath();
      };
      
      // Set up success handler
      img.onload = function() {
        imageLoaded = true;
        console.log('Successfully loaded splash image from:', img.src);
      };
      
      // Start loading with first path
      tryNextPath();
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', function() {
        setupEventListeners();
        loadSplashImage();
      });
    } else {
      // DOM already loaded
      setupEventListeners();
      loadSplashImage();
    }
    
    // Fallback: Also try loading on window load
    window.addEventListener('load', function() {
      if (!imageLoaded) {
        loadSplashImage();
      }
    });
  </script>
</body>
</html>